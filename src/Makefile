# (This is what I used on Netcom 95-04-02)
# Make a Forth    Wil Baden and Skip Carter	95-04-02
# Just say "make".

# Make a choice or make your own.  (Let me know about your own.)

#
MACHINE = MIPS

# Object code suffix ( Unix: o, DOS: obj)
O = o

# "pdm4" is the public domain M4.
# "/usr/5bin/m4" is the AT&T M4.

#M4 = m4
#M4 = pdm4
M4 = /usr/bin/m4

#
# Unix
#
CC = gcc
#CC = cc

# CFLAGS	Flags needed by your compiler.

#CFLAGS =
CFLAGS = -D__GNU__ -D$(MACHINE) -I/usr/include/bsd -ansi
#
FO = -o fo
AFORTH = -o aforth
AUTO = -o auto

# DOS
#
#FO =
#AFORTH =
#AUTO =
#
#
# Symantec
#CC = sc
#CFLAGS = -3 -ml -f -o
#
# Borland
#CC = bcc
#CFLAGS = -3 -ml -f

BIN = $$HOME/bin

# PLATFORM is for any special stuff that you have to do in your system.

PLATFORM =
#PLATFORM = mac.c

# OPTIONS determine what primitive code is generated by M4.

# -DLONG	Codespace is long integer.
# -DSUPER	Codespace is 64-bit integer (for super-computers)
# 		(default) Codespace is short integer.
#		Short integer limits Dataspace to 64 K.

# -DFLOATING	Floating point primitives will be generated.

# -DFUN		Code dispatch is through table of function pointers.
# 		(default) Code dispatch is through huge switch statement.

# -DSTRETCHING	Special code for Stretching Forth.  (Not included.)

# -DPC		PC specific.  Gives you "KEY?"  (Please extend.)
# -DMAC		Mac specific.  KEY? COUNTER GET-FILE PUT-FILE DELETE-FILE
# -Dunix	Unix specific.  The default with Unix M4 processors.  Gives
#			you Skip Carter's TCP/IP stuff.

#OPTIONS =
OPTIONS = -DLONG
#OPTIONS = -DLONG -DSTRETCHING
#OPTIONS = -DFLOATING
#OPTIONS = -DFLOATING -DLONG
#OPTIONS = -DFLOATING -DSUPER
#OPTIONS = -DFLOATING -DLONG -DSTRETCHING
#OPTIONS = -DFUN -DFLOATING -DLONG
#OPTIONS = -DFUN -DLONG
#OPTIONS = -DFLOATING -DLONG -Dunix -DFILEHDL -DTCP -DUSE_XDR

# CUSTOM 	List of files to be compiled for your special stuff.

#CUSTOM =
#CUSTOM = sopen.$(O)
#CUSTOM = gb_flip.c

# ELECTIVES	Path to your electives.

#ELECTIVES = $$HOME/this4th/lib/
#ELECTIVES = $$HOME/this/lib/
ELECTIVES = ../lib/
#ELECTIVES = ::lib:

# Code for autostart version, comment out for normal compilation.
#STARTUP =
#STARTUP = mailfig.fo
#STARTUP = andemo.fo
#STARTUP = start.fo

# EXTRA		Extra Forth source to be included in _your_ Forth.

#EXTRA =
EXTRA = stock
#EXTRA = ../lib/double.fo ../lib/search.fo
#EXTRA = ../lib/double.fo ../lib/search.fo fcntl.fo xdr.fo

#
# RPC/XDR stuff
#RPC_LIB =
#RPC_LIB = -lrpcsvc -lsun
#
# Other libraries that need to be linked.
EXTRA_LIBS =
#EXTRA_LIBS = -lm $(RPC_LIB) -lbsd

all:	test

# Make A Forth Step 1: make clean.

clean:	tidy
	rm -f aforth

# Make A Forth Step 2: make fo.c.

fo.c:	fo.m4 llfc.m4 custom.m4 Makefile
	$(M4) $(OPTIONS) fo.m4 > fo.c

# Make A Forth Step 3: make fo.

fo:	fo.c fo.h kernel.c $(PLATFORM) $(CUSTOM)
	$(CC) $(CFLAGS) fo.c kernel.c $(PLATFORM) $(CUSTOM) $(FO) $(EXTRA_LIBS)

# Make A Forth Step 4: make rth.m4

rth.m4:	./fo rth save-4th $(EXTRA) $(STARTUP)
	./fo rth path $(ELECTIVES) $(EXTRA) $(STARTUP) save-4th
	rm -f hi.tmp

# Make A Forth Step 5: make aforth.c.

aforth.c:	rth.m4
	rm -f aforth.c
	$(M4) $(OPTIONS) -DEXTENDED fo.m4 > aforth.c

# Make A Forth Step 6: make aforth.

aforth:	aforth.c fo.h kernel.c $(PLATFORM) $(CUSTOM)
	$(CC) $(CFLAGS) aforth.c kernel.c $(PLATFORM) $(CUSTOM) $(AFORTH) $(EXTRA_LIBS)

# Auto startup version
#

auto.c:	rth.m4
	rm -f auto.c
	$(M4) $(OPTIONS) -DEXTENDED fo.m4 > auto.c

# Make A Forth Step 3: make auto.

auto:	auto.c fo.h kernel.c $(PLATFORM) $(CUSTOM)
	$(CC) $(CFLAGS) auto.c kernel.c $(PLATFORM) $(CUSTOM) $(AUTO) $(EXTRA_LIBS)
	rm -f rth.m4

#
#
# Test A Forth.

test:	./aforth
	./aforth tests

# Install executable.

install:	aforth
	mv -f aforth $(BIN)
	rm -f $(BIN)/eval $(BIN)/file
	cp eval file $(BIN)

# Remove intermediate files, leaving A Forth and its sources.

tidy:
	rm -f fo.c fo foo* rth.m4 hi.tmp aforth.c core *.o

#
.SUFFIXES: .$(O) .c
.c.$(O):
	$(CC) $(CFLAGS) -c $*.c

#	End of "Makefile"
