( Knuth's recommended Subtractive RNG from _The Stanford GraphBase_ )
( Standard Forth CORE EXT with NOT and | )

| : MOD-DIFF	- [ hex ] 7FFFFFFF [ decimal ] and ;

| create A	56 cells allot

| variable *GB-FPTR

| : GB-FLIP-CYCLE				( -- +random )
	A cell+	32 cells A +				( ii jj)
	begin
		over >R
			over @ over @ MOD-DIFF
		R> !
		>R cell+ R>    cell+
		DUP  55 cells A + U>
	until
	drop						( ii)
	A cell+						( ii jj)
	begin
		over >R
			over @ over @ MOD-DIFF
		R> !
		>R cell+ R>    cell+
		OVER  55 cells A + U>
	until						2drop
	54 cells A + *GB-FPTR !
	55 cells A + @					( +random)
;

| : GB-INIT-RAND				( seed -- )
	-1 A !
	0 MOD-DIFF
	dup 55 cells A + !
	dup  1						( seed prev next)
	1 21 do
		dup i cells A + !
		MOD-DIFF				( seed next)
		>R					( seed)
			dup 1 and if
				2/
				[ hex ] 40000000 [ decimal ] +
			else
				2/
			then
		R>					( seed next)
		over MOD-DIFF
		i cells A + @ swap			( seed prev next)
	i  21 +  55 MOD  i -  +loop			2drop drop
	GB-FLIP-CYCLE drop
	GB-FLIP-CYCLE drop
	GB-FLIP-CYCLE drop
	GB-FLIP-CYCLE drop
	GB-FLIP-CYCLE drop
;

| : GB-NEXT-RAND				( -- +random )
	*GB-FPTR @ @					( +random)
	dup 0< if
		drop GB-FLIP-CYCLE	
	else
		-1 cells *GB-FPTR +! 
	then
;

| : GB-UNIF-RAND				( +range -- +random )
	>R						( )
		[ hex ] 80000000 [ decimal ]		( t)
		dup 0 R@ UM/MOD drop -
		begin
			GB-NEXT-RAND			( t +random)
			2dup U> NOT
		while
			drop				( t)
		repeat					( t +random)
		nip					( +random)
	0 R> UM/MOD drop
;

marker TEST-FLIP
: nonce
	-314159 GB-INIT-RAND    GB-NEXT-RAND
		119318998 <> abort" Failure on the first try. "

	133 0 do    GB-NEXT-RAND drop    loop

	[ hex ] 55555555 [ decimal ] GB-UNIF-RAND
		748103812 <> abort" Failure on the second try. "
; nonce
TEST-FLIP

( With One's Complement arithmetic, try
: MOD-DIFF - dup 0< if    [ hex ] 40000000 + 40000000 [ decimal ] +    then ;
)

( For This Forth, alias to friendlier names. )

: SET-RANDOM	GB-INIT-RAND ; inline
: RANDOM	GB-NEXT-RAND ; inline
: GET-RANDOM	GB-UNIF-RAND ; inline

|| ( End of GB-FLIP Module. )

: URANDOM	RANDOM dup 2* xor ;

: RANDOMIZE
	TIME&DATE  12 * + 31 * + 24 * + 60 * + 60 * +  SET-RANDOM
;
